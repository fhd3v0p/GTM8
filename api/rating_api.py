#!/usr/bin/env python3
"""
API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
+ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ Telegram Bot API –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞
"""

from flask import Flask, request, jsonify
import os
import requests
from flask_cors import CORS
import requests
import json
import os
import random
from typing import List, Dict, Any, Optional

app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
SUPABASE_URL = os.environ.get("SUPABASE_URL", "https://rxmtovqxjsvogyywyrha.supabase.co")
SUPABASE_ANON_KEY = os.environ.get("SUPABASE_ANON_KEY", "")
SUPABASE_SERVICE_KEY = os.environ.get("SUPABASE_SERVICE_ROLE_KEY", "")

# Telegram Bot
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "")

supabase_headers = {
    'apikey': SUPABASE_SERVICE_KEY or SUPABASE_ANON_KEY,
    'Authorization': f'Bearer {SUPABASE_SERVICE_KEY or SUPABASE_ANON_KEY}',
    'Content-Type': 'application/json'
}

SUBSCRIPTION_CHANNELS = [
    { 'channel_id': -1002088959587, 'channel_username': 'rejmenyavseryoz', 'channel_name': '–†–µ–∂—å –º–µ–Ω—è –≤—Å–µ—Ä—å—ë–∑' },
    { 'channel_id': -1001971855072, 'channel_username': 'chchndra_tattoo', 'channel_name': '–ß—É—á—É–Ω–¥—Ä–∞' },
    { 'channel_id': -1002133674248, 'channel_username': 'naidenka_tattoo', 'channel_name': 'naidenka_tattoo' },
    { 'channel_id': -1001508215942, 'channel_username': 'l1n_ttt', 'channel_name': 'Lin++' },
    { 'channel_id': -1001555462429, 'channel_username': 'murderd0lll', 'channel_name': 'MurderdOll' },
    { 'channel_id': -1002132954014, 'channel_username': 'poteryashkatattoo', 'channel_name': '–ü–æ—Ç–µ—Ä—è—à–∫–∞' },
    { 'channel_id': -1001689395571, 'channel_username': 'EMI3MO', 'channel_name': 'EMI' },
    { 'channel_id': -1001767997947, 'channel_username': 'bloodivamp', 'channel_name': 'bloodivamp' },
    { 'channel_id': -1001973736826, 'channel_username': 'G_T_MODEL', 'channel_name': "Gothams top model" },
]

# === Helpers ===
def _get_supabase_rows(endpoint: str, select: Optional[str] = None, params: Optional[Dict[str, Any]] = None) -> Any:
    q = params.copy() if params else {}
    if select:
        q['select'] = select
    resp = requests.get(f"{SUPABASE_URL}/rest/v1/{endpoint}", headers=supabase_headers, params=q, timeout=20)
    if resp.status_code in (200, 206):
        return resp.json() if resp.content else []
    raise RuntimeError(f"supabase get {endpoint} {resp.status_code}: {resp.text}")

def _insert_supabase_rows(endpoint: str, rows: List[Dict[str, Any]], prefer: str = 'return=representation') -> Any:
    headers = {**supabase_headers, 'Prefer': prefer}
    resp = requests.post(f"{SUPABASE_URL}/rest/v1/{endpoint}", headers=headers, json=rows, timeout=30)
    if resp.status_code in (200, 201):
        return resp.json() if resp.content else []
    raise RuntimeError(f"supabase insert {endpoint} {resp.status_code}: {resp.text}")

def _get_user_map_by_telegram_id() -> Dict[int, Dict[str, Any]]:
    rows = _get_supabase_rows('users', select='telegram_id,username,first_name,subscription_tickets,referral_tickets,total_tickets')
    out: Dict[int, Dict[str, Any]] = {}
    for r in rows:
        try:
            tid = int(r.get('telegram_id'))
        except Exception:
            continue
        out[tid] = r
    return out

def _is_user_subscribed_to_all_now(telegram_id: int) -> bool:
    if not TELEGRAM_BOT_TOKEN:
        return False
    try:
        for ch in SUBSCRIPTION_CHANNELS:
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getChatMember"
            r = requests.get(url, params={'chat_id': ch['channel_id'], 'user_id': telegram_id}, timeout=15)
            if r.status_code != 200:
                return False
            st = (r.json() or {}).get('result', {}).get('status')
            if st not in ('member', 'administrator', 'creator'):
                return False
        return True
    except Exception:
        return False

def _weighted_choice(candidates: List[Dict[str, Any]]) -> Optional[int]:
    total = 0
    weights: List[int] = []
    ids: List[int] = []
    for c in candidates:
        try:
            tid = int(c.get('telegram_id'))
        except Exception:
            continue
        w = int(c.get('total_tickets', 0) or 0)
        if w <= 0:
            continue
        ids.append(tid)
        weights.append(w)
        total += w
    if total <= 0 or not ids:
        return None
    pick = random.randint(1, total)
    acc = 0
    for idx, w in enumerate(weights):
        acc += w
        if pick <= acc:
            return ids[idx]
    return ids[-1]

def _build_prize(place_number: int) -> Dict[str, str]:
    if place_number == 1:
        return {'prize_name': '–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑', 'prize_value': '20 000 ‚ÇΩ –ó–æ–ª–æ—Ç–æ–µ —è–±–ª–æ–∫–æ'}
    if 2 <= place_number <= 5:
        return {'prize_name': '–ë—å—é—Ç–∏ —É—Å–ª—É–≥–∞ –Ω–∞ –≤—ã–±–æ—Ä', 'prize_value': '–ü—Ä–∏–∑ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Telegram Premium'}
    return {'prize_name': '–§—É—Ç–±–æ–ª–∫–∞', 'prize_value': '–§—É—Ç–±–æ–ª–∫–∞ GTM'}

def _draw_giveaway_winners() -> List[Dict[str, Any]]:
    """–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∏–ª–µ—Ç–∞–º–∏
        users = _get_supabase_rows('users', 
                                 select='telegram_id,username,first_name,last_name,total_tickets',
                                 params={'total_tickets': 'gt.0'})
        
        if not users:
            return []
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–º–∞—Å—Ç–µ—Ä–æ–≤ —Ç–∞—Ç—É)
        organizers_telegram_ids = {
            7364321578,  # @bloodivampin
            896659949,   # @Murderdollll
            1472489964,  # @ufantasiesss
            670676502,   # @chchndra
            732970924,   # @naidenka_tatto0
            794865003,   # @g9r1a
            420639535,   # @punk2_n0t_d34d
        }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–∫–ª—é—á–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
        eligible_users = [u for u in users if u.get('telegram_id') not in organizers_telegram_ids]
        
        if not eligible_users:
            print("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤")
            return []
        
        print(f"üéØ –ò—Å–∫–ª—é—á–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤: {len(organizers_telegram_ids)}")
        print(f"üé≤ –î–æ—Å—Ç—É–ø–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(eligible_users)}")
        
        winners = []
        used_telegram_ids = set()
        
        # 1 –º–µ—Å—Ç–æ: –ø–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–∑ API
        first_place_winner = _get_first_place_winner()
        if first_place_winner:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
            if first_place_winner['winner_telegram_id'] in organizers_telegram_ids:
                print("‚ùå –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º! –ò—Å–∫–ª—é—á–∞–µ–º...")
                first_place_winner = None
            else:
                winners.append(first_place_winner)
                used_telegram_ids.add(first_place_winner['winner_telegram_id'])
        
        # –†–æ–∑—ã–≥—Ä—ã—à –º–µ—Å—Ç 2-6
        for place in range(2, 7):
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏
            available_users = [u for u in eligible_users if u.get('telegram_id') not in used_telegram_ids]
            
            if not available_users:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –º–µ—Å—Ç–æ {place} - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                break
                
            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤
            winner_telegram_id = _weighted_choice(available_users)
            
            if winner_telegram_id is None:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –¥–ª—è –º–µ—Å—Ç–∞ {place}")
                break
                
            # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            winner_data = next((u for u in available_users if u.get('telegram_id') == winner_telegram_id), None)
            
            if winner_data:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–∑
                prize = _build_prize(place)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_name = _format_display_name(winner_data)
                
                winner = {
                    'place_number': place,
                    'prize_name': prize['prize_name'],
                    'prize_value': prize['prize_value'],
                    'winner_username': winner_data.get('username', ''),
                    'winner_first_name': display_name,
                    'winner_telegram_id': winner_data['telegram_id'],
                    'winner_tickets': winner_data['total_tickets'],
                    'is_manual_winner': False,
                    'giveaway_id': 1
                }
                
                winners.append(winner)
                used_telegram_ids.add(winner_telegram_id)
                
                print(f"üé≤ –ú–µ—Å—Ç–æ {place}: {display_name} (ID: {winner_telegram_id}) - {winner_data['total_tickets']} –±–∏–ª–µ—Ç–æ–≤")
        
        return winners
        
    except Exception as e:
        print(f"Error drawing winners: {e}")
        return []

def _get_first_place_winner() -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—Ç–∞"""
    try:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—Ç–∞
        # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ß–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        first_place_id = os.environ.get('FIRST_PLACE_TELEGRAM_ID')
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π)
        if not first_place_id:
            first_place_id = "6628857003"  # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—Ç–∞
        
        try:
            telegram_id = int(first_place_id)
        except ValueError:
            print(f"Invalid FIRST_PLACE_TELEGRAM_ID: {first_place_id}")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        user_data = _get_supabase_rows('users', 
                                     select='telegram_id,username,first_name,last_name,total_tickets',
                                     params={'telegram_id': f'eq.{telegram_id}'})
        
        if user_data and len(user_data) > 0:
            user = user_data[0]
            display_name = _format_display_name(user)
            
            print(f"üéØ –ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {display_name} (ID: {telegram_id})")
            
            return {
                'place_number': 1,
                'prize_name': '–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑',
                'prize_value': '20 000 ‚ÇΩ –ó–æ–ª–æ—Ç–æ–µ —è–±–ª–æ–∫–æ',
                'winner_username': user.get('username', ''),
                'winner_first_name': display_name,
                'winner_telegram_id': user['telegram_id'],
                'winner_tickets': user['total_tickets'],
                'is_manual_winner': True,
                'giveaway_id': 1
            }
        else:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return None
        
    except Exception as e:
        print(f"Error getting first place winner: {e}")
        return None

def _format_display_name(user_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_data.get('first_name'):
        display_name = user_data['first_name']
        if user_data.get('last_name'):
            display_name += f" {user_data['last_name']}"
        return display_name
    elif user_data.get('username'):
        return f"@{user_data['username']}"
    else:
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['telegram_id']}"

# === API for Giveaway (X/Y and referrals) ===
@app.route('/api/giveaway/total_all', methods=['GET'])
def total_all_tickets():
    """–í–µ—Ä–Ω—É—Ç—å total_all_tickets –∏–∑ —Ç–∞–±–ª–∏—Ü—ã/–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è total_all_tickets"""
    try:
        resp = requests.get(
            f"{SUPABASE_URL}/rest/v1/total_all_tickets",
            headers=supabase_headers,
            params={'select': '*'},
            timeout=15,
        )
        if resp.status_code in (200, 206):
            rows = resp.json() if resp.content else []
            value = None
            if isinstance(rows, list) and rows:
                row = rows[0]
                for key in ['total_all_tickets', 'total_all', 'total', 'value', 'count']:
                    if key in row:
                        v = row[key]
                        try:
                            value = int(v)
                            break
                        except Exception:
                            pass
                if value is None:
                    for v in row.values():
                        try:
                            value = int(v)
                            break
                        except Exception:
                            continue
            if value is not None:
                return jsonify({'success': True, 'total_all_tickets': value})
            return jsonify({'success': False, 'error': 'no value'}), 404
        return jsonify({'success': False, 'error': 'supabase error', 'status': resp.status_code, 'detail': resp.text}), 500
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/giveaway/user_stats/<int:telegram_id>', methods=['GET'])
def giveaway_user_stats(telegram_id: int):
    """–í–µ—Ä–Ω—É—Ç—å user tickets –∏ referral tickets –ø–æ telegram_id –∏–∑ users"""
    try:
        resp = requests.get(
            f"{SUPABASE_URL}/rest/v1/users",
            headers=supabase_headers,
            params={'telegram_id': f"eq.{telegram_id}", 'select': 'total_tickets,subscription_tickets,referral_tickets,referral_code'},
            timeout=15,
        )
        if resp.status_code in (200, 206):
            rows = resp.json() if resp.content else []
            if isinstance(rows, list) and rows:
                u = rows[0]
                return jsonify({
                    'success': True,
                    'total_tickets': u.get('total_tickets', 0),
                    'subscription_tickets': u.get('subscription_tickets', 0),
                    'referral_tickets': u.get('referral_tickets', 0),
                    'referral_code': u.get('referral_code', ''),
                })
            return jsonify({'success': True, 'total_tickets': 0, 'subscription_tickets': 0, 'referral_tickets': 0, 'referral_code': ''})
        return jsonify({'success': False, 'error': 'supabase error', 'status': resp.status_code, 'detail': resp.text}), 500
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/referral-code', methods=['POST'])
def get_or_create_referral_code():
    try:
        data = request.get_json() or {}
        telegram_id = data.get('telegram_id')
        if not telegram_id:
            return jsonify({'success': False, 'error': 'telegram_id required'}), 400
        # 1) get user
        get_resp = requests.get(
            f"{SUPABASE_URL}/rest/v1/users",
            headers=supabase_headers,
            params={
                'telegram_id': f"eq.{telegram_id}",
                'select': 'telegram_id,referral_code'
            },
            timeout=15
        )
        if get_resp.status_code not in (200, 206):
            return jsonify({'success': False, 'error': 'Failed to query user', 'detail': get_resp.text}), 500
        rows = get_resp.json() if get_resp.content else []
        # 2) If exists and has code
        if isinstance(rows, list) and rows:
            user = rows[0]
            code = user.get('referral_code')
            if code:
                # ensure referrals upsert
                try:
                    _ = requests.post(
                        f"{SUPABASE_URL}/rest/v1/referrals",
                        headers={**supabase_headers, 'Prefer': 'resolution=merge-duplicates'},
                        json={'telegram_id': int(telegram_id), 'referral_code': code},
                        timeout=15
                    )
                except Exception:
                    pass
                return jsonify({'success': True, 'referral_code': code})
            # 3) else create code and patch
            import random, string
            code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
            patch_resp = requests.patch(
                f"{SUPABASE_URL}/rest/v1/users",
                headers={**supabase_headers, 'Prefer': 'return=representation'},
                params={'telegram_id': f"eq.{telegram_id}"},
                json={'referral_code': code},
                timeout=15
            )
            if patch_resp.status_code in (200, 204):
                # ensure referrals upsert
                try:
                    _ = requests.post(
                        f"{SUPABASE_URL}/rest/v1/referrals",
                        headers={**supabase_headers, 'Prefer': 'resolution=merge-duplicates'},
                        json={'telegram_id': int(telegram_id), 'referral_code': code},
                        timeout=15
                    )
                except Exception:
                    pass
                return jsonify({'success': True, 'referral_code': code})
            return jsonify({'success': False, 'error': 'Failed to set referral_code', 'detail': patch_resp.text}), 500
        # 4) user doesn't exist -> insert with minimal fields
        import random, string
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        insert_resp = requests.post(
            f"{SUPABASE_URL}/rest/v1/users",
            headers={**supabase_headers, 'Prefer': 'return=representation'},
            json={
                'telegram_id': int(telegram_id),
                'username': '',
                'first_name': '',
                'last_name': '',
                'subscription_tickets': 0,
                'referral_tickets': 0,
                'total_tickets': 0,
                'referral_code': code
            },
            timeout=15
        )
        if insert_resp.status_code in (200, 201):
            # ensure referrals upsert
            try:
                _ = requests.post(
                    f"{SUPABASE_URL}/rest/v1/referrals",
                    headers={**supabase_headers, 'Prefer': 'resolution=merge-duplicates'},
                    json={'telegram_id': int(telegram_id), 'referral_code': code},
                    timeout=15
                )
            except Exception:
                pass
            return jsonify({'success': True, 'referral_code': code})
        return jsonify({'success': False, 'error': 'Failed to create user', 'detail': insert_resp.text}), 500
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/referral-join', methods=['POST'])
def referral_join():
    """Proxy: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ –≤ referrals service (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—É—Ç—å)."""
    try:
        data = request.get_json() or {}
        referral_code = data.get('referral_code')
        referred_telegram_id = data.get('referred_telegram_id')
        if not referral_code or not referred_telegram_id:
            return jsonify({'success': False, 'error': 'referral_code and referred_telegram_id required'}), 400
        referrals_base = os.environ.get('REFERRALS_API_URL', 'http://referrals_api:8000')
        r = requests.post(f"{referrals_base}/referral-join", json={
            'referral_code': referral_code,
            'referred_telegram_id': int(referred_telegram_id),
        }, timeout=25)
        return jsonify(r.json()), r.status_code
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/check-subscriptions', methods=['POST'])
def check_subscriptions():
    """Proxy: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ referrals service (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—É—Ç—å)."""
    try:
        data = request.get_json() or {}
        telegram_id = data.get('telegram_id')
        if not telegram_id:
            return jsonify({'success': False, 'error': 'telegram_id required'}), 400
        referrals_base = os.environ.get('REFERRALS_API_URL', 'http://referrals_api:8000')
        r = requests.post(f"{referrals_base}/check-subscriptions", json={'telegram_id': int(telegram_id)}, timeout=25)
        return jsonify(r.json()), r.status_code
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/rate-artist', methods=['POST'])
def rate_artist():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏–∑ Flutter"""
    try:
        data = request.get_json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not data:
            return jsonify({"success": False, "error": "No data provided"}), 400
            
        artist_name = data.get('artist_name')
        user_id = data.get('user_id') 
        rating = data.get('rating')
        comment = data.get('comment', '')
        
        if not all([artist_name, user_id, rating]):
            return jsonify({"success": False, "error": "Missing required fields"}), 400
            
        if not isinstance(rating, int) or rating < 1 or rating > 5:
            return jsonify({"success": False, "error": "Rating must be between 1 and 5"}), 400
        
        print(f"üìù –ü–æ–ª—É—á–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç Flutter: {user_id} –æ—Ü–µ–Ω–∏–ª {artist_name} –Ω–∞ {rating} –∑–≤–µ–∑–¥")
        
        # –í—ã–∑—ã–≤–∞–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é –≤ Supabase –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        response = requests.post(
            f"{SUPABASE_URL}/rest/v1/rpc/add_artist_rating",
            headers=supabase_headers,
            json={
                "artist_name_param": artist_name,
                "user_id_param": str(user_id),
                "rating_param": rating,
                "comment_param": comment if comment else None
            }
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get("success"):
                print(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {artist_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats_response = requests.post(
                    f"{SUPABASE_URL}/rest/v1/rpc/get_artist_rating",
                    headers=supabase_headers,
                    json={"artist_name_param": artist_name}
                )
                
                stats = {}
                if stats_response.status_code == 200:
                    stats = stats_response.json()
                
                return jsonify({
                    "success": True,
                    "message": "Rating saved successfully",
                    "stats": stats
                })
            else:
                error = result.get("error", "Unknown error")
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç Supabase: {error}")
                return jsonify({"success": False, "error": error}), 400
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –æ—Ç Supabase: {response.status_code}")
            return jsonify({"success": False, "error": f"Supabase error: {response.status_code}"}), 500
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ rate_artist: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/api/get-rating/<artist_name>', methods=['GET'])
def get_artist_rating(artist_name):
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∞—Ä—Ç–∏—Å—Ç–∞"""
    try:
        response = requests.post(
            f"{SUPABASE_URL}/rest/v1/rpc/get_artist_rating",
            headers=supabase_headers,
            json={"artist_name_param": artist_name}
        )
        
        if response.status_code == 200:
            return jsonify(response.json())
        else:
            return jsonify({"error": f"Failed to get rating: {response.status_code}"}), 500
            
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return jsonify({"status": "ok", "message": "Rating API is working"})


# === Giveaway Winners Generation and Retrieval ===

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
_giveaway_results_cache = None
_giveaway_draw_completed = False

def _save_giveaway_results_to_cache(winners: List[Dict[str, Any]]) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –∫—ç—à –ò –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    global _giveaway_results_cache, _giveaway_draw_completed
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        _clear_existing_giveaway_results()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for winner in winners:
            winner_data = {
                'giveaway_id': winner.get('giveaway_id', 1),
                'place_number': winner['place_number'],
                'winner_telegram_id': winner['winner_telegram_id'],
                'winner_username': winner.get('winner_username', ''),
                'winner_first_name': winner.get('winner_first_name', ''),
                'prize_name': winner['prize_name'],
                'prize_value': winner['prize_value'],
                'winner_tickets': winner.get('winner_tickets', 0),
                'is_manual_winner': winner.get('is_manual_winner', False),
                'created_at': 'now()'
            }
            
            try:
                _insert_supabase_rows('giveaway_winners', [winner_data])
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –º–µ—Å—Ç–∞ {winner['place_number']}: {winner.get('winner_first_name', 'Unknown')}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –º–µ—Å—Ç–∞ {winner['place_number']}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        _giveaway_results_cache = winners
        _giveaway_draw_completed = True
        
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à. –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {len(winners)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ë–î –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        _giveaway_results_cache = winners
        _giveaway_draw_completed = True

def _clear_existing_giveaway_results() -> None:
    """–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        delete_url = f"{SUPABASE_URL}/rest/v1/giveaway_winners"
        delete_params = {'giveaway_id': 'eq.1'}  # –¢–µ–∫—É—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à
        
        response = requests.delete(delete_url, headers=supabase_headers, params=delete_params, timeout=30)
        if response.status_code in (200, 204):
            print("üóëÔ∏è –°—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—á–∏—â–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

def _get_cached_giveaway_results() -> Optional[List[Dict[str, Any]]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—Å–Ω–∞—á–∞–ª–∞ –∏–∑ –ë–î, –ø–æ—Ç–æ–º –∏–∑ –∫—ç—à–∞)"""
    global _giveaway_results_cache
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        db_results = _get_supabase_rows('giveaway_winners', 
                                      select='*',
                                      params={'giveaway_id': 'eq.1'})
        
        if db_results and len(db_results) > 0:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–µ—Å—Ç—É
            sorted_results = sorted(db_results, key=lambda x: int(x.get('place_number', 0)))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
            _giveaway_results_cache = sorted_results
            _giveaway_draw_completed = True
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(sorted_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return sorted_results
        
        # –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        if _giveaway_results_cache:
            print("üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫—ç—à–∞ –≤ –ø–∞–º—è—Ç–∏")
            return _giveaway_results_cache
        
        print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –ë–î, –Ω–∏ –≤ –∫—ç—à–µ")
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –ë–î: {e}")
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ë–î –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        return _giveaway_results_cache

def _is_giveaway_draw_completed() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_results = _get_supabase_rows('giveaway_winners', 
                                      select='*',
                                      params={'giveaway_id': 'eq.1'})
        
        if db_results and len(db_results) > 0:
            has_results = len(db_results) > 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            global _giveaway_draw_completed
            _giveaway_draw_completed = has_results
            
            return has_results
        
        # –ï—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        return _giveaway_draw_completed
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
        return _giveaway_draw_completed

@app.route('/api/giveaway/generate-results', methods=['POST'])
def generate_giveaway_results():
    try:
        body = request.get_json() or {}
        giveaway_id = int(body.get('giveaway_id', 0))
        if not giveaway_id:
            return jsonify({'success': False, 'message': 'giveaway_id required'}), 400

        # If results already exist, return them
        existing = _get_supabase_rows('giveaway_winners', params={'giveaway_id': f'eq.{giveaway_id}'}, select='*')
        if isinstance(existing, list) and existing:
            return jsonify({'success': True, 'results': sorted(existing, key=lambda r: int(r.get('place_number', 0)))})

        users_map = _get_user_map_by_telegram_id()
        users: List[Dict[str, Any]] = [
            {**u, 'telegram_id': int(tid)} for tid, u in users_map.items() if int(u.get('total_tickets', 0) or 0) > 0
        ]
        if not users:
            return jsonify({'success': False, 'message': 'no eligible users'}), 400

        # Manual winner for 1st place from giveaways.manual_winner_telegram_id
        manual_tid: Optional[int] = None
        try:
            g_rows = _get_supabase_rows('giveaways', params={'id': f'eq.{giveaway_id}'}, select='id,manual_winner_telegram_id')
            if isinstance(g_rows, list) and g_rows:
                raw_id = g_rows[0].get('manual_winner_telegram_id')
                manual_tid = int(raw_id) if raw_id is not None else None
        except Exception:
            manual_tid = None

        winners: List[Dict[str, Any]] = []

        # Place 1: manual (if provided and exists among users), else weighted
        first_tid: Optional[int] = None
        if manual_tid and manual_tid in users_map:
            first_tid = manual_tid
        else:
            first_tid = _weighted_choice(users)
        if first_tid:
            u = users_map.get(first_tid, {})
            p = _build_prize(1)
            winners.append({
                'giveaway_id': giveaway_id,
                'place_number': 1,
                'winner_telegram_id': int(first_tid),
                'winner_username': u.get('username') or '',
                'winner_first_name': u.get('first_name') or '',
                'prize_name': p['prize_name'],
                'prize_value': p['prize_value'],
                'is_manual_winner': bool(manual_tid and manual_tid == first_tid),
            })

        used_ids = {w['winner_telegram_id'] for w in winners}

        # Places 2..6: weighted, with subscription re-check for users who possess subscription tickets
        target_places = [2, 3, 4, 5, 6]
        max_attempts = 500
        attempts = 0
        while target_places and attempts < max_attempts:
            attempts += 1
            candidate_id = _weighted_choice(users)
            if not candidate_id:
                break
            if candidate_id in used_ids:
                continue
            u = users_map.get(candidate_id, {})
            has_sub_ticket = int(u.get('subscription_tickets', 0) or 0) > 0
            if has_sub_ticket and not _is_user_subscribed_to_all_now(candidate_id):
                continue
            place = target_places.pop(0)
            p = _build_prize(place)
            winners.append({
                'giveaway_id': giveaway_id,
                'place_number': place,
                'winner_telegram_id': int(candidate_id),
                'winner_username': u.get('username') or '',
                'winner_first_name': u.get('first_name') or '',
                'prize_name': p['prize_name'],
                'prize_value': p['prize_value'],
                'is_manual_winner': False,
            })
            used_ids.add(candidate_id)

        if len(winners) < 6:
            return jsonify({'success': False, 'message': f'could not fill winners, selected {len(winners)}'}), 500

        # _insert_supabase_rows('giveaway_winners', winners) # This line is now handled by _save_giveaway_results_to_cache
        return jsonify({'success': True, 'results': sorted(winners, key=lambda r: int(r.get('place_number', 0)))})
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500


@app.route('/api/giveaway/results/<int:giveaway_id>', methods=['GET'])
def get_giveaway_results(giveaway_id: int):
    try:
        rows = _get_supabase_rows('giveaway_winners', params={'giveaway_id': f'eq.{giveaway_id}'}, select='*')
        if isinstance(rows, list) and rows:
            return jsonify({'success': True, 'results': sorted(rows, key=lambda r: int(r.get('place_number', 0)))})
        return jsonify({'success': False, 'results': []})
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/api/giveaway/draw-winners', methods=['GET'])
def draw_giveaway_winners():
    """–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à
        if _is_giveaway_draw_completed():
            cached_results = _get_cached_giveaway_results()
            if cached_results:
                print("üéØ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
                return jsonify({
                    'success': True,
                    'winners': cached_results,
                    'total_winners': len(cached_results),
                    'message': f'–í–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {len(cached_results)} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π',
                    'from_cache': True
                })
        
        # –ï—Å–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è - –ø—Ä–æ–≤–æ–¥–∏–º –Ω–æ–≤—ã–π
        print("üé≤ –ü—Ä–æ–≤–æ–¥–∏–º –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à...")
        winners = _draw_giveaway_winners()
        
        if not winners:
            return jsonify({
                'success': False, 
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –∏–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –±–∏–ª–µ—Ç–∞–º–∏'
            }), 404
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à
        _save_giveaway_results_to_cache(winners)
        
        return jsonify({
            'success': True,
            'winners': winners,
            'total_winners': len(winners),
            'message': f'–†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–≤–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {len(winners)} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π',
            'from_cache': False
        })
        
    except Exception as e:
        return jsonify({
            'success': False, 
            'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}'
        }), 500

@app.route('/api/giveaway/reset-draw', methods=['POST'])
def reset_giveaway_draw():
    """–°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    try:
        global _giveaway_results_cache, _giveaway_draw_completed
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        _giveaway_results_cache = None
        _giveaway_draw_completed = False
        
        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            _clear_existing_giveaway_results()
            print("üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—á–∏—â–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ë–î: {e}")
        
        print("üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–±—Ä–æ—à–µ–Ω—ã (–ø–∞–º—è—Ç—å + –ë–î)")
        return jsonify({
            'success': True,
            'message': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–±—Ä–æ—à–µ–Ω—ã. –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ–¥–µ—Ç –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à.'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}'
        }), 500

@app.route('/api/giveaway/draw-status', methods=['GET'])
def get_giveaway_draw_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    try:
        return jsonify({
            'success': True,
            'draw_completed': _is_giveaway_draw_completed(),
            'winners_count': len(_giveaway_results_cache) if _giveaway_results_cache else 0,
            'message': '–†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω' if _is_giveaway_draw_completed() else '–†–æ–∑—ã–≥—Ä—ã—à –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}'
        }), 500

@app.route('/api/giveaway/first-place', methods=['GET', 'POST'])
def manage_first_place():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º –º–µ—Å—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    if request.method == 'GET':
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—Ç–∞
        try:
            first_place_id = os.environ.get('FIRST_PLACE_TELEGRAM_ID', '123456789')
            
            user_data = _get_supabase_rows('users', 
                                         select='telegram_id,username,first_name,last_name,total_tickets',
                                         params={'telegram_id': f'eq.{first_place_id}'})
            
            if user_data and len(user_data) > 0:
                user = user_data[0]
                return jsonify({
                    'success': True,
                    'first_place_winner': {
                        'telegram_id': user['telegram_id'],
                        'username': user.get('username', ''),
                        'first_name': user.get('first_name', ''),
                        'last_name': user.get('last_name', ''),
                        'total_tickets': user['total_tickets'],
                        'display_name': _format_display_name(user)
                    }
                })
            else:
                return jsonify({
                    'success': False,
                    'error': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {first_place_id} –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }), 404
                
        except Exception as e:
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {str(e)}'
            }), 500
    
    elif request.method == 'POST':
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—Ç–∞
        try:
            data = request.get_json() or {}
            telegram_id = data.get('telegram_id')
            
            if not telegram_id:
                return jsonify({
                    'success': False,
                    'error': 'telegram_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
                }), 400
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
            user_data = _get_supabase_rows('users', 
                                         select='telegram_id,username,first_name,last_name,total_tickets',
                                         params={'telegram_id': f'eq.{telegram_id}'})
            
            if not user_data or len(user_data) == 0:
                return jsonify({
                    'success': False,
                    'error': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
                }), 404
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥
            user = user_data[0]
            display_name = _format_display_name(user)
            
            print(f"üéØ –ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {display_name} (ID: {telegram_id})")
            
            return jsonify({
                'success': True,
                'message': f'–ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {display_name}',
                'winner': {
                    'telegram_id': user['telegram_id'],
                    'username': user.get('username', ''),
                    'first_name': user.get('first_name', ''),
                    'last_name': user.get('last_name', ''),
                    'total_tickets': user['total_tickets'],
                    'display_name': display_name
                }
            })
            
        except Exception as e:
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {str(e)}'
            }), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Rating API –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=True)