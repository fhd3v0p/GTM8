import 'dart:convert';
import 'package:http/http.dart' as http;
import '../config/api_config.dart';
import 'supabase_service.dart';

/// –£–∑–∫–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è Giveaway: –±—ã—Å—Ç—Ä—ã–µ —á—Ç–µ–Ω–∏—è X/Y –∏–∑ Supabase
/// –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Rating API. –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è UI.
class GiveawaySupabaseService {
  GiveawaySupabaseService._();
  static final GiveawaySupabaseService instance = GiveawaySupabaseService._();

  /// –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∞—Ç—Å—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ users
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: total_tickets, subscription_tickets, referral_tickets, referral_code
  Future<Map<String, dynamic>> getUserStatsQuick(int telegramId) async {
    try {
      if (!ApiConfig.isConfigured) {
        print('‚ö†Ô∏è [GIVEAWAY] API not configured, returning fallback user stats');
        return {
          'total_tickets': 5,
          'subscription_tickets': 1,
          'referral_tickets': 2,
          'referral_code': 'DEMO123'
        };
      }
      return await SupabaseService().getUserStatsFast(telegramId);
    } catch (e) {
      print('‚ùå [GIVEAWAY] Error in getUserStatsQuick: $e');
      return {
        'total_tickets': 5,
        'subscription_tickets': 1,
        'referral_tickets': 2,
        'referral_code': 'DEMO123'
      };
    }
  }

  /// –û–±—â–∞—è —Å—É–º–º–∞ –±–∏–ª–µ—Ç–æ–≤ –ø–æ —Å–∏—Å—Ç–µ–º–µ (Y)
  /// –ü—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è total_all_tickets, –∏–Ω–∞—á–µ —Å—É–º–º–∏—Ä—É–µ—Ç users.total_tickets
  Future<int> getTotalAllTicketsQuick() async {
    try {
      if (!ApiConfig.isConfigured) {
        print('‚ö†Ô∏è [GIVEAWAY] API not configured, returning fallback total tickets');
        return 42; // Fallback –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      }
      return await SupabaseService().getTotalAllTicketsFast();
    } catch (e) {
      print('‚ùå [GIVEAWAY] Error in getTotalAllTicketsQuick: $e');
      return 42; // Fallback –∑–Ω–∞—á–µ–Ω–∏–µ
    }
  }

  /// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)
  Future<int?> tryReadTotalAllTicketsView() async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API
      if (!ApiConfig.isConfigured) {
        print('‚ö†Ô∏è [GIVEAWAY] API not configured, skipping total_all_tickets view');
        return null;
      }
      
      final viewUrl = '${ApiConfig.apiBaseUrl}/total_all_tickets?select=*';
      print('üîç [GIVEAWAY] Fetching total tickets from: $viewUrl');
      
      final resp = await http.get(Uri.parse(viewUrl), headers: ApiConfig.headers);
      print('üîç [GIVEAWAY] Response status: ${resp.statusCode}');
      print('üîç [GIVEAWAY] Response body: ${resp.body.substring(0, resp.body.length > 200 ? 200 : resp.body.length)}...');
      
      if (resp.statusCode == 200) {
        final data = json.decode(resp.body);
        if (data is List && data.isNotEmpty) {
          final row = data.first as Map<String, dynamic>;
          for (final key in ['total_all_tickets','total_all','total','value','count']) {
            if (row.containsKey(key)) {
              final v = row[key];
              final parsed = (v is int) ? v : int.tryParse('$v') ?? 0;
              print('‚úÖ [GIVEAWAY] Found total tickets: $parsed');
              return parsed;
            }
          }
        }
      } else {
        print('‚ùå [GIVEAWAY] HTTP error ${resp.statusCode}: ${resp.body}');
      }
    } catch (e) {
      print('‚ùå [GIVEAWAY] Exception in tryReadTotalAllTicketsView: $e');
    }
    return null;
  }
}

 